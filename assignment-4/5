#include <iostream>
#include <queue>
using namespace std;

class StackTwoQueues {
    queue<int> q1, q2;
public:
    void push(int x) {
        q1.push(x);
        cout << x << " pushed.\n";
    }

    void pop() {
        if (q1.empty()) {
            cout << "Stack Underflow!\n";
            return;
        }
        while (q1.size() > 1) {
            q2.push(q1.front());
            q1.pop();
        }
        cout << q1.front() << " popped.\n";
        q1.pop();
        swap(q1, q2);
    }

    void display() {
        queue<int> temp = q1;
        cout << "Stack elements (top to bottom): ";
        while (!temp.empty()) {
            cout << temp.back() << " ";  // approximate top
            temp.pop();
        }
        cout << endl;
    }
};

int main() {
    StackTwoQueues st;
    st.push(10);
    st.push(20);
    st.push(30);
    st.pop();
    st.pop();
    st.push(40);
    st.pop();
    return 0;
}



#include <iostream>
#include <queue>
using namespace std;

class StackOneQueue {
    queue<int> q;
public:
    void push(int x) {
        int sz = q.size();
        q.push(x);
        for (int i = 0; i < sz; i++) {
            q.push(q.front());
            q.pop();
        }
        cout << x << " pushed.\n";
    }

    void pop() {
        if (q.empty()) {
            cout << "Stack Underflow!\n";
            return;
        }
        cout << q.front() << " popped.\n";
        q.pop();
    }

    void display() {
        queue<int> temp = q;
        cout << "Stack elements (top to bottom): ";
        while (!temp.empty()) {
            cout << temp.front() << " ";
            temp.pop();
        }
        cout << endl;
    }
};

int main() {
    StackOneQueue st;
    st.push(10);
    st.push(20);
    st.push(30);
    st.pop();
    st.pop();
    st.push(40);
    st.pop();
    return 0;
}
