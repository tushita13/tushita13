#include <iostream>
using namespace std;

#define MAX 5
int queue[MAX], front = -1, rear = -1;

void enqueue(int x) {
    if (rear == MAX - 1) {
        cout << "Queue Overflow!\n";
        return;
    }
    if (front == -1) front = 0;
    queue[++rear] = x;
    cout << x << " enqueued.\n";
}

void dequeue() {
    if (front == -1 || front > rear) {
        cout << "Queue Underflow!\n";
        return;
    }
    cout << queue[front++] << " dequeued.\n";
}

void isEmpty() {
    if (front == -1 || front > rear)
        cout << "Queue is Empty\n";
    else
        cout << "Queue is Not Empty\n";
}

void isFull() {
    if (rear == MAX - 1)
        cout << "Queue is Full\n";
    else
        cout << "Queue is Not Full\n";
}

void display() {
    if (front == -1 || front > rear) {
        cout << "Queue is Empty\n";
        return;
    }
    cout << "Queue elements: ";
    for (int i = front; i <= rear; i++)
        cout << queue[i] << " ";
    cout << endl;
}

void peek() {
    if (front == -1 || front > rear)
        cout << "Queue is Empty\n";
    else
        cout << "Front element: " << queue[front] << endl;
}

int main() {
    int choice, value;
    do {
        cout << "\n--- QUEUE MENU ---\n";
        cout << "1. Enqueue\n2. Dequeue\n3. isEmpty\n4. isFull\n5. Display\n6. Peek\n7. Exit\n";
        cout << "Enter choice: ";
        cin >> choice;

        switch (choice) {
            case 1: cout << "Enter value: "; cin >> value; enqueue(value); break;
            case 2: dequeue(); break;
            case 3: isEmpty(); break;
            case 4: isFull(); break;
            case 5: display(); break;
            case 6: peek(); break;
            case 7: cout << "Exiting...\n"; break;
            default: cout << "Invalid choice!\n";
        }
    } while (choice != 7);

    return 0;
}
