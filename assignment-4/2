#include <iostream>
using namespace std;

#define MAX 5
int cq[MAX], front = -1, rear = -1;

bool isEmpty() {
    return (front == -1);
}

bool isFull() {
    return ((rear + 1) % MAX == front);
}

void enqueue(int x) {
    if (isFull()) {
        cout << "Queue Overflow!\n";
        return;
    }
    if (isEmpty()) {
        front = rear = 0;
    } else {
        rear = (rear + 1) % MAX;
    }
    cq[rear] = x;
    cout << x << " enqueued.\n";
}

void dequeue() {
    if (isEmpty()) {
        cout << "Queue Underflow!\n";
        return;
    }
    cout << cq[front] << " dequeued.\n";
    if (front == rear) {
        front = rear = -1;  // queue becomes empty
    } else {
        front = (front + 1) % MAX;
    }
}

void display() {
    if (isEmpty()) {
        cout << "Queue is Empty\n";
        return;
    }
    cout << "Queue elements: ";
    int i = front;
    while (true) {
        cout << cq[i] << " ";
        if (i == rear) break;
        i = (i + 1) % MAX;
    }
    cout << endl;
}

void peek() {
    if (isEmpty())
        cout << "Queue is Empty\n";
    else
        cout << "Front element: " << cq[front] << endl;
}

int main() {
    int choice, value;
    do {
        cout << "\n--- CIRCULAR QUEUE MENU ---\n";
        cout << "1. Enqueue\n2. Dequeue\n3. isEmpty\n4. isFull\n5. Display\n6. Peek\n7. Exit\n";
        cout << "Enter choice: ";
        cin >> choice;

        switch (choice) {
            case 1: cout << "Enter value: "; cin >> value; enqueue(value); break;
            case 2: dequeue(); break;
            case 3: cout << (isEmpty() ? "Queue is Empty\n" : "Queue is Not Empty\n"); break;
            case 4: cout << (isFull() ? "Queue is Full\n" : "Queue is Not Full\n"); break;
            case 5: display(); break;
            case 6: peek(); break;
            case 7: cout << "Exiting...\n"; break;
            default: cout << "Invalid choice!\n";
        }
    } while (choice != 7);

    return 0;
}
